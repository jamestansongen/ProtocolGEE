//Source: https://bellingcat.github.io/RS4OSINT/C1_Lights.html

//Visible Infrared Imaging Radiometer Suite (VIIRS) nighttime lights dataset

//1. Pre-Processing
//import packages written by Gennadii Donchyts
//utils and text to annotate the date of each image on the timelapse
var utils = require("users/gena/packages:utils");
var text = require("users/gena/packages:text");

//define Area of Interest (AOI)
var AOI = ee.Geometry.Polygon(
        [[[42.555362833405326, 36.62010778397765],
          [42.555362833405326, 35.18296243288332],
          [44.681217325592826, 35.18296243288332],
          [44.681217325592826, 36.62010778397765]]])

//start and end dates for the gif
var startDate = '2013-01-01';
var endDate = '2018-01-01';

//file name for exporting gif
var export_name='qayyarah_viirs'

// A palette to visualize the VIIRS imagery. This one is similar to Matplotlib's "Magma" palette. 
var viirs_palette = [
  "#000004",
  "#320a5a",
  "#781b6c",
  "#bb3654",
  "#ec6824",
  "#fbb41a",
  "#fcffa4",
];

// Visualisation parameters for the VIIRS imagery, defining a minimum and maximum value, and referencing the palette we just created
var VIIRSvis = { min: -0.1, max: 1.6, palette: viirs_palette };

var VIIRS= ee.ImageCollection("NOAA/VIIRS/DNB/MONTHLY_V1/VCMCFG") 
                    .select('avg_rad')
                    // Calculate the sum of the 'avg_rad' band within the AOI
                    .map(function(image) { 
                    var blank=image.reduceRegions({ // reduceRegions is a function that allows us to reduce the values of a band within a
                                    collection: AOI, // geometry. In this case, we're reducing the values of the 'avg_rad' band within the AOI
                                    reducer: ee.Reducer.sum(), // We're using the sum reducer, which will sum the values of the 'avg_rad' band
                                    scale: 10}) // We're reducing the values of the 'avg_rad' band at a scale of 10m
                                .first() // We only want the first element of the collection, which is the sum of the 'avg_rad' band within the AOI
                                .get('sum') // We want the value of the 'sum' property, which is the sum of the 'avg_rad' band within the AOI
                    // For each image, define a property 'blank' that stores the sum of the 'avg_rad' band within the AOI. 
                    // We're also going to take a base 10 log of the image-- this will help us visualize the data by dampening extreme values             
                    return image.set('blank', blank).log10().unmask(0)
                    })
                    // Now, we can filter images which are fully or partially blank over our AOI
                    .filter(ee.Filter.gt('blank', 10))
                    // Finally, we filter the collection to the specified date range
                    .filterDate(startDate, endDate)
                    
//Set basemap to satellite and center to AOI
Map.setOptions('HYBRID')
Map.centerObject(AOI)
Map.addLayer(VIIRS.first(),VIIRSvis,'Nighttime Lights')

//2. Create timelapse

//function to create timelapse
var gif = function (col, col_vis, AOI) {


    // Define the date annotations to be printed in the top left of the gif in white
  var annotations = [
    {
      textColor: "white",
      position: "left",
      offset: "1%",
      margin: "1%",
      property: "label",
      // Dynamically size the annotations according to the size of the AOI
      scale: AOI.area(100).sqrt().divide(200),
    },
  ];


    // Next, we want to map over the image collection,
    var rgbVis = col.map(function (image) {
        // Get the date of the image and format it
        var start = ee.Date(image.get("system:time_start"));
        var label = start.format("YYYY-MM-dd");
        // And visualize the image using the visualization parameters defined earlier.
        // We also want to set a property called "label" that stores the formatted date 
        return image.visualize(col_vis).set({ label: label });
  });


    // Now we use the label property and the annotateImage function from @gena_d to annotate each image with the date. 
  rgbVis = rgbVis.map(function (image) {
    return text.annotateImage(image, {}, AOI, annotations);
  });


  // Define GIF visualization parameters.
  var gifParams = {
    maxPixels: 27017280,
    region: AOI,
    crs: "EPSG:3857",
    dimensions: 640,
    framesPerSecond: 5,
  };


  // Export the gif to Google Drive
  Export.video.toDrive({
    collection: rgbVis, // the image collection
    description: export_name, // the name of the file
    dimensions: 1080, // the dimensions of the gif
    framesPerSecond: 5, // the number of frames per second
    region: AOI, // the area of interest
  });
  // Print the GIF URL to the console.
  print(rgbVis.getVideoThumbURL(gifParams));


  // Render the GIF animation in the console.
  print(ui.Thumbnail(rgbVis, gifParams));
};
// Change AOI, startDate, endDate, col (i.e. image collection) and col_vis (visualisation parameters) as necessary

//Generate gif on the Fall of Mosul
gif(VIIRS, VIIRSvis, AOI);

//3. The Qayyarah Fires
//Create AOI for Mosul and Qayyarah

var mosul = ee.Feature(
        ee.Geometry.Polygon(
            [[[43.054977780266675, 36.438274276521234],
              [43.054977780266675, 36.290642221212416],
              [43.24792516796199, 36.290642221212416],
              [43.24792516796199, 36.438274276521234]]], null, false),
        {
          "label": "Mosul",
          "system:index": "0"
        }),


    qayyarah = ee.Feature(
        ee.Geometry.Polygon(
            [[[43.08240275545117, 35.8925587996721],
              [43.08240275545117, 35.77899970860588],
              [43.26642375154492, 35.77899970860588],
              [43.26642375154492, 35.8925587996721]]], null, false),
        {
          "label": "Qayyarah",
          "system:index": "0"
        })


// Let's put these together in a list 
var regions=[qayyarah, mosul]

//Create chart that will take the mean value of the VIIRS image in each rectangle over time
var chart =
    ui.Chart.image
        .seriesByRegion({
          imageCollection: VIIRS,
          regions: regions,
          reducer: ee.Reducer.mean(),
          seriesProperty:'label'
        }).setOptions({
          title: 'Nighttime Lights'
        });
        
print(chart)
//Mosul (red line) darkening in 2014 as city is taken by ISIS before brightening subsequently as the city is liberated
//Qayyarah (blue line) becoming brighter at night in 2016 as oilfields are set on fire and later extinguished and becomes dark again