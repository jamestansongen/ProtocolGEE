/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var table = ee.FeatureCollection("FAO/GAUL/2015/level1");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
// Source: https://andrewmaclachlan.github.io/CASA0023/8_temperature.html

//8.2 load in Vector data
//--------------------------Vector data---------------------------

var dataset = ee.FeatureCollection("FAO/GAUL/2015/level1");

var dataset_style = dataset.style({
  color: '1e90ff',
  width: 2,
  fillColor: '00000000',  // with alpha set for partial transparency
//  lineType: 'dotted',
//  pointSize: 10,
//  pointShape: 'circle'
});

Map.addLayer(dataset, {}, 'Second Level Administrative Units_1');

var Beijing = dataset.filter('ADM1_CODE == 899');

Map.addLayer(Beijing, {}, 'Beijing');

//8.3 load in Landsat data
//--------------------------Landsat data---------------------------

function applyScaleFactors(image) {
  var opticalBands = image.select('SR_B.').multiply(0.0000275).add(-0.2);
  //select optical bands (e.g. green, red, blue) and apply scale factor
  var thermalBands = image.select('ST_B.*').multiply(0.00341802).add(149.0);
  //select thermal bands and apply scale factor
  return image.addBands(opticalBands, null, true)
              .addBands(thermalBands, null, true);
  //add this back to the image
}

var landsat = ee.ImageCollection('LANDSAT/LC08/C02/T1_L2')
  .filterDate('2022-01-01', '2022-10-10')
  .filter(ee.Filter.calendarRange(5, 9,'month'))
  .filterBounds(Beijing)  // Intersecting ROI
  .filter(ee.Filter.lt("CLOUD_COVER", 1))
  .map(applyScaleFactors);
//filter summer months instead of the whole year

print(landsat)

var subtracted = landsat.select('ST_B10').map(function (image) {
  var subtract = image.subtract(273.1);
  //temperature band is B10 but it is in kelvin and not celsius hence minus 273.1
  var mask = subtract.gt(0);
  //set mask up for values below 0 because likely no data
  var mask_0 = subtract.updateMask(mask); //Apply this in a mask
return mask_0
})  

//take the mean and clip to study area
var subtracted_mean = subtracted.reduce(ee.Reducer.mean())
  .clip(Beijing)
  
  // set up some of the visualisation paramters 
// the palette is taken from the MODIS example (which we will see later on)
var vis_params = {
  min: 20,
  max: 55,
    palette: [
    '040274', '040281', '0502a3', '0502b8', '0502ce', '0502e6',
    '0602ff', '235cb1', '307ef3', '269db1', '30c8e2', '32d3ef',
    '3be285', '3ff38f', '86e26f', '3ae237', 'b5e22e', 'd6e21f',
    'fff705', 'ffd611', 'ffb613', 'ff8b13', 'ff6e08', 'ff500d',
    'ff0000', 'de0101', 'c21301', 'a71001', '911003'
  ]
};

Map.addLayer(subtracted_mean, vis_params, 'Landsat Temp');

//8.4 MODIS

//061: Indicates the processing level of the data. Level 061 generally corresponds to geolocated and georeferenced swath data.
//MYD11A1: This is the specific product identifier. The "MYD" prefix indicates that the data comes from the MODIS sensor
//on the Aqua satellite (as opposed to "MOD" for Terra). "11" refers to land surface products, and "A1" refers to the MODIS
//Land Surface Temperature and Emissivity (LST&E) product

//Aqua
var MODIS_Aqua_day = ee.ImageCollection('MODIS/061/MYD11A1')
  .filterDate('2022-01-01', '2022-10-10')
  .filter(ee.Filter.calendarRange(5, 9,'month'))
  .filterBounds(Beijing)  // Intersecting ROI;
  .select('LST_Day_1km')
  //Select daytime land surface temperature at 1km resolution

print(MODIS_Aqua_day, "MODIS_AQUA")  

//Terra
var MODIS_Terra_day = ee.ImageCollection('MODIS/061/MOD11A1')
  .filterDate('2022-01-01', '2022-10-10')
  .filter(ee.Filter.calendarRange(5, 9,'month'))
  .filterBounds(Beijing)  // Intersecting ROI;
  .select('LST_Day_1km')

print(MODIS_Terra_day, "MODIS_Terra")

//scaling MODIS. According to documentation to multiply by 0.02 and subtract kelvin (273.1)
function MODISscale(image) {
  var temp = image.select('LST_.*').multiply(0.02).subtract(273.1);
  return image.addBands(temp, null, true)
}


var MODIS_Aqua_day = ee.ImageCollection('MODIS/061/MYD11A1')
  .filterDate('2022-01-01', '2022-10-10')
  .filter(ee.Filter.calendarRange(5, 9,'month'))
  .select('LST_Day_1km')
  .map(MODISscale)
  .filterBounds(Beijing);  // Intersecting ROI;

print(MODIS_Aqua_day, "MODIS_AQUA")  

var MODIS_Terra_day = ee.ImageCollection('MODIS/061/MOD11A1')
  .filterDate('2022-01-01', '2022-10-10')
  .filter(ee.Filter.calendarRange(5, 9,'month'))
  .filterBounds(Beijing)  // Intersecting ROI;
  .select('LST_Day_1km')
  .map(MODISscale);
  
//merge collection and plot mean temperature
var mean_aqua_terra = MODIS_Aqua_day.merge(MODIS_Terra_day)
  .reduce(ee.Reducer.mean())
  .clip(Beijing)

Map.addLayer(mean_aqua_terra, landSurfaceTemperatureVis,
    'MODIS Land Surface Temperature');
    
//display results
var landSurfaceTemperatureVis = {
  min: 15,
  max: 45,
  palette: [
    '040274', '040281', '0502a3', '0502b8', '0502ce', '0502e6',
    '0602ff', '235cb1', '307ef3', '269db1', '30c8e2', '32d3ef',
    '3be285', '3ff38f', '86e26f', '3ae237', 'b5e22e', 'd6e21f',
    'fff705', 'ffd611', 'ffb613', 'ff8b13', 'ff6e08', 'ff500d',
    'ff0000', 'de0101', 'c21301', 'a71001', '911003'
  ],
};

Map.addLayer(mean_aqua_terra, landSurfaceTemperatureVis,
    'MODIS Land Surface Temperature');
    
//8.5 Timeseries
var aqua_terra = MODIS_Aqua_day.merge(MODIS_Terra_day) //merge the two collections

var timeseries = ui.Chart.image.series({
  imageCollection: aqua_terra,
  region: Beijing,
  reducer: ee.Reducer.mean(),
  scale: 1000,
  xProperty: 'system:time_start'})
  .setOptions({
     title: 'Temperature time series',
     vAxis: {title: 'LST Celsius'}});
print(timeseries);

//8.6 Statistics per spatial unit

//Landsat
//--------------------------Statistics per level 2---------------------------.

var GAUL_2 = ee.FeatureCollection("FAO/GAUL/2015/level2");

var Beijing_level2 = GAUL_2.filter('ADM1_CODE == 899');

Map.addLayer(Beijing_level2, {}, 'Second Level Administrative Units_2');

print(subtracted_mean)

var mean_Landsat_level2 = subtracted_mean.reduceRegions({
  collection: Beijing_level2,
  reducer: ee.Reducer.mean(),
  scale: 30,
});

Map.addLayer(mean_Landsat_level2, {}, 'mean_Landsat_level2');
//mean column added to attribute table
//There is a reduce percentile functionâ€¦reducer: ee.Reducer.percentile([10, 20, 30, 40, 50, 60, 70, 80, 90])
//that might also be useful. This takes all the pixels in each polygon and lists the value of the percentiles specified
//in the attribute table

// Export the FeatureCollection to a SHP file.
Export.table.toDrive({
  collection: mean_Landsat_level2,
  description:'mean_Landsat_level2',
  fileFormat: 'SHP'
});

//MODIS
var chart = ui.Chart.image.seriesByRegion({
    imageCollection: MODIS_Aqua_day,
    regions: Beijing_level2, //this is the difference
    reducer: ee.Reducer.mean()
})

print(chart)

var timeseries_per_unit = ui.Chart.image.seriesByRegion({
  imageCollection: aqua_terra,
  //band: 'NDVI',
  regions: Beijing_level2,
  reducer: ee.Reducer.mean(),
  scale: 1000,
  //seriesProperty: 'label',
  xProperty: 'system:time_start'
})
.setOptions({
  title: 'Average temp per spatial unit',
  hAxis: {title: 'Date', titleTextStyle: {italic: false, bold: true}},
  vAxis: {
    title: 'LST Celsius',
    titleTextStyle: {italic: false, bold: true}
  },
  lineWidth: 1
//  colors: ['0f8755', '808080'],
});

// Collect block, image, value triplets.
var triplets = aqua_terra.map(function(image) {
  return image.select('LST_Day_1km').reduceRegions({
    collection: Beijing_level2.select(['ADM2_CODE']), 
    reducer: ee.Reducer.mean(), 
    scale: 30
  }).filter(ee.Filter.neq('mean', null))
    .map(function(f) { 
      return f.set('imageId', image.id());
    });
}).flatten();

print(triplets.first(), "trip")

Export.table.toDrive({
  collection: triplets, 
  description: triplets, 
  fileNamePrefix: triplets,
  fileFormat: 'CSV'
});

//Extension to plot heat index in GEE based (case study=London wards)

//a. percentiles of mean column
//var percentiles = mean_Landsat_ward.reduceColumns({
//  reducer: ee.Reducer.percentile([10, 20, 30, 40, 50, 60, 70, 80, 90, 99, 100]),
//  selectors: ['mean']
//});

//print(percentiles, "percentile") ///gives the overall percentile then need to map

//b. pull out these values as numbers
//var p40 = ee.Number(percentiles.get('p40'))
//var p70 = ee.Number(percentiles.get('p70'))
//var p90 = ee.Number(percentiles.get('p90'))
//var p99 = ee.Number(percentiles.get('p99'))
//var p100 = ee.Number(percentiles.get('p100'))

//print(p40, "p40")// check one

//c. do the case_when() equivalent
//var resub= mean_Landsat_ward.map(function(feat){
//  return ee.Algorithms.If(ee.Number(feat.get('mean')).lt(p40).and(ee.Number(feat.get('mean')).gt(0)),
//  feat.set({'percentile_cat': 1}),
//  ee.Algorithms.If(ee.Number(feat.get('mean')).gt(p40).and(ee.Number(feat.get('mean')).lt(p70)),
//  feat.set({'percentile_cat': 2}),
//  ee.Algorithms.If(ee.Number(feat.get('mean')).gt(p70).and(ee.Number(feat.get('mean')).lt(p90)),
//  feat.set({'percentile_cat': 3}),
//  ee.Algorithms.If(ee.Number(feat.get('mean')).gt(p90).and(ee.Number(feat.get('mean')).lt(p99)),
//  feat.set({'percentile_cat': 4}),
//  ee.Algorithms.If(ee.Number(feat.get('mean')).gt(p99).and(ee.Number(feat.get('mean')).lte(p100)),
//  feat.set({'percentile_cat': 5}),  
//  feat.set({'percentile_cat': 0}))
//))))})

//d. visualisation parameters
//var visParams_vec = {
//    'palette': ['#fee5d9', '#fcae91', '#fb6a4a', '#de2d26', '#a50f15'],
//    'min': 0.0,
//    'max': 5,
//    'opacity': 0.8,
//}

//e. make an image and add to map
//var image = ee.Image().float().paint(resub, 'percentile_cat')
//Map.addLayer(image, visParams_vec, 'Percentile_cat')

////example of adding a field to a dataset in GEE (similar to mutate in R)
//var collectionWithCount = mean_Landsat_ward.map(function (feature) {
  ///make a new column
//  return feature.set('percentage',
  // take the mean column and * 100                   
//  feature.getNumber('mean').multiply(100));
//});